{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyPmShILr2Lijhxg0yzo0C1D"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"YHqXx5K_xj2b","executionInfo":{"status":"ok","timestamp":1693350872953,"user_tz":240,"elapsed":6836,"user":{"displayName":"Max Cohen","userId":"04733430036885582245"}}},"outputs":[],"source":["import numpy as np\n","import h5py\n","import math\n","import os\n","import pathlib\n","import matplotlib.pyplot as plt\n","import matplotlib\n","%matplotlib inline\n","import torch\n","import random\n","import torch.nn as nn\n","import sklearn\n","import collections\n","from sklearn.model_selection import train_test_split\n","import torch.nn.functional as F\n","import json\n","from torch.optim import Adam\n","import pylab\n","from scipy.optimize import curve_fit\n","from sklearn.metrics import roc_curve, auc"]},{"cell_type":"code","source":["N = 10\n","x = np.array([1, 4.3, 2, 1, 1, 1])\n","y = (np.sort(x)[-N:])[::-1]\n","\n","num_zeros_to_add = N - len(y)\n","padded_y = np.concatenate((y, np.zeros(num_zeros_to_add)))\n","\n","print(padded_y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AK6eUIapk51P","executionInfo":{"status":"ok","timestamp":1693351756705,"user_tz":240,"elapsed":5,"user":{"displayName":"Max Cohen","userId":"04733430036885582245"}},"outputId":"1360872b-1c93-4f7f-b3a0-66f86df94340"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["[4.3 2.  1.  1.  1.  1.  0.  0.  0.  0. ]\n"]}]},{"cell_type":"code","source":["_1 = np.array([1, 2])\n","_2 = np.array([4, 5, 6])\n","_3 = np.array([7, 8, 9, 4])\n","_4 = np.array([7, 8, 9])\n","\n","x = np.column_stack((_1, _2, _3))\n","print(x.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":291},"id":"qD2p7LA44hks","executionInfo":{"status":"error","timestamp":1693351407218,"user_tz":240,"elapsed":166,"user":{"displayName":"Max Cohen","userId":"04733430036885582245"}},"outputId":"7fee2dff-5a7a-42cb-a740-c894e8b27040"},"execution_count":12,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-975aa0d292a6>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0m_4\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m9\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumn_stack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/core/overrides.py\u001b[0m in \u001b[0;36mcolumn_stack\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/lib/shape_base.py\u001b[0m in \u001b[0;36mcolumn_stack\u001b[0;34m(tup)\u001b[0m\n\u001b[1;32m    654\u001b[0m             \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubok\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    655\u001b[0m         \u001b[0marrays\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 656\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    657\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    658\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/core/overrides.py\u001b[0m in \u001b[0;36mconcatenate\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 2 and the array at index 1 has size 3"]}]},{"cell_type":"code","source":["\n","# Example multi-dimensional array\n","X = torch.tensor(np.array([[0, 0, 0],\n","                     [0, 2, 0],\n","                     [3, 0, 0],\n","                           [0, 0, 0]]))\n","\n","# Get the indices of zeros in the array using np.where()\n","print(X.shape)\n","print(X)\n","\n","Y = ~torch.all(X == 0, dim=1)\n","\n","print(Y.shape)\n","print(Y)\n","\n","print(torch.sum(X))"],"metadata":{"id":"J91JVI2Z3MfU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690307010559,"user_tz":240,"elapsed":864,"user":{"displayName":"Max Cohen","userId":"04733430036885582245"}},"outputId":"6b1a9f02-24bf-400b-f3b1-66048f4f318a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([4, 3])\n","tensor([[0, 0, 0],\n","        [0, 2, 0],\n","        [3, 0, 0],\n","        [0, 0, 0]])\n","torch.Size([4])\n","tensor([False,  True,  True, False])\n","tensor(5)\n"]}]},{"cell_type":"code","source":["x = 10 * np.arange(0, 10, 1)\n","y = np.where(x > 40)[0]\n","\n","print(x)\n","print(y)\n","\n","print(np.sort(x)[::-1])"],"metadata":{"id":"_oyJbB7cbC2P","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1691004220178,"user_tz":240,"elapsed":413,"user":{"displayName":"Max Cohen","userId":"04733430036885582245"}},"outputId":"5d497e11-da12-4dff-ebca-8a191349daa8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 0 10 20 30 40 50 60 70 80 90]\n","[5 6 7 8 9]\n","[90 80 70 60 50 40 30 20 10  0]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"3lDfCAnX48IX"},"execution_count":null,"outputs":[]}]}